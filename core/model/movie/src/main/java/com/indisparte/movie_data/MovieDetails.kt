package com.indisparte.movie_data

import com.indisparte.common.Genre
import com.indisparte.common.ProductionCompany
import com.indisparte.common.ProductionCountry
import com.indisparte.common.SpokenLanguage


/**
 * Represents detailed information about a movie.
 *
 * @property adult Indicates whether the movie is intended for adult audiences.
 * @property backdropPath The path to the backdrop image of the movie.
 * @property belongsToCollection The collection to which the movie belongs.
 * @property budget The budget of the movie.
 * @property genres The list of genres associated with the movie.
 * @property homepage The homepage URL of the movie.
 * @property id The unique identifier of the movie.
 * @property originalLanguage The original language of the movie.
 * @property originalTitle The original title of the movie.
 * @property overview A brief overview of the movie's plot.
 * @property popularity The popularity rating of the movie.
 * @property posterPath The path to the poster image of the movie.
 * @property productionCompanies The list of production companies involved in the movie.
 * @property productionCountries The list of production countries for the movie.
 * @property revenue The revenue generated by the movie.
 * @property runtime The duration of the movie in minutes.
 * @property spokenLanguages The list of spoken languages in the movie.
 * @property status The status of the movie (e.g., released, in production).
 * @property tagline The tagline of the movie.
 * @property title The title of the movie.
 * @property video Indicates whether a video is available for the movie.
 * @property voteAverage The average vote rating of the movie.
 * @property voteCount The total number of votes for the movie.
 * @author Antonio Di Nuzzo
 */
class MovieDetails(
    adult: Boolean,
    private val backdropPath: String?,
    val belongsToCollection: BelongsToCollection?,
    private val budget: Long,
    val genres: List<Genre>,
    val homepage: String,
    id: Int,
    val originalLanguage: String,
    val originalTitle: String,
    val overview: String,
    popularity: Double,
    posterPath: String?,
    val productionCompanies: List<ProductionCompany>,
    val productionCountries: List<ProductionCountry>,
    releaseDate: String,
    private val revenue: Long,
    private val runtime: Int,
    val spokenLanguages: List<SpokenLanguage>,
    val status: String,
    val tagline: String,
    title: String,
    val video: Boolean,
    voteAverage: Double,
    val voteCount: Int,
) : Movie(
    adult = adult,
    id = id,
    popularity = popularity,
    posterPath = posterPath,
    releaseDate = releaseDate,
    title = title,
    voteAverage = voteAverage
) {

    /**
     * Updates the genres of the movie based on the provided list of updated genres.
     *
     * @param updatedGenres The list of genres with updated information.
     */
    fun updateGenres(updatedGenres: List<Genre>) {
        val idToGenreMap = updatedGenres.associateBy { it.id }

        genres.forEach { genre ->
            idToGenreMap[genre.id]?.let { updatedGenre ->
                genre.isFavorite = updatedGenre.isFavorite
            }
        }
    }

    /**
     * Gets the budget of the movie in a formatted currency string.
     */
    val formattedBudget: String
        get() = formatCurrency(budget)

    /**
     * Gets the revenue of the movie in a formatted currency string.
     */
    val formattedRevenue: String
        get() = formatCurrency(revenue)

    /**
     * Gets the runtime of the movie in a formatted string (hours and minutes).
     */
    val formattedRuntime: String
        get() = formatRuntime(runtime)

    /**
     * Gets the complete URL to the backdrop image of the movie in W780 resolution.
     */
    val completeBackdropPathW780: String?
        get() = getCompleteImagePath(IMAGE_BASE_URL_W780, backdropPath)

    /**
     * Gets the complete URL to the backdrop image of the movie in W500 resolution.
     */
    val completeBackdropPathW500: String?
        get() = getCompleteImagePath(IMAGE_BASE_URL_W500, backdropPath)


    /**
     * Gets a concatenated string of production company names.
     *
     * @return The concatenated string of production company names.
     */
    val productionCompaniesName: String
        get() = productionCompanies.joinToString(", ") { it.name }

    override fun toString(): String {
        return "MovieDetails(backdropPath='$backdropPath', belongsToCollection=$belongsToCollection, budget=$budget, genres=$genres, homepage='$homepage', originalLanguage='$originalLanguage', originalTitle='$originalTitle', overview='$overview', productionCompanies=$productionCompanies, productionCountries=$productionCountries, revenue=$revenue, runtime=$runtime, spokenLanguages=$spokenLanguages, status='$status', tagline='$tagline', video=$video, voteCount=$voteCount)"
    }
}
